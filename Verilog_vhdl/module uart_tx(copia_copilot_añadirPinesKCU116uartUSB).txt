module uart_tx
  #(parameter CLKS_PER_BIT = 434) //establecer un valor
  )
   input       ,
   input       ,
   input [7:0] ,
   output reg  ,
   output reg  ,
   output reg  ,
  );

localparam IDLE_STATE   = 2'b00;
localparam START_STATE  = 2'b01;
localparam SEND_BIT_STATE = 2'b10;
localparam STOP_STATE     = 2'b11;

reg [1:0]  state           = IDLE_STATE;
reg [15:0] counter         = 0;
reg [2:0]  bit_index       = 0;
reg [7:0]  data_byte       = 0;

always @(posedge clock)
  begin

    case (state)
//sustituye los pines por los físicos del xdc uart
      IDLE_STATE:
        begin
          o_tx      <= 1; //sustituye este nombre no es el que esta en el constraints pin-fisico
          o_done    <= 0; //sustituye 
          counter   <= 0;
          bit_index <= 0;

      if (i_data_avail == 1)
        begin
          o_active  <= 1; //este pin tienes que sustituirlo por el pin físico del xdc o constraints
          data_byte <= i_data_byte; //este pin tienes que sustituirlo por el pin físico del xdc o constraints

          state    <= START_STATE;
         end
       else
         begin
           state   <= IDLE_STATE;
           o_active <= 0; //sustituir pin por el pin físico del xdc que te pasé de uart etc
           data_byte <= i_data_byte;
           state     <= START_STATE;
          end
         else
           begin
             state    <= IDLE_STATE;
             o_active <= 0;
           end
        end

//Enviar un bit de inicio
START_STATE :
  begin
    o_tx <= 0; //este pin o_tx se sustituye por el pin físico del constraints de kintex KCU116
 // Esperar CLKS_PER_BIT-1 ciclos de reloj para finalizar el bit de inicio
if (counter < CLKS_PER_BIT-1)
  begin
    counter <= counter + 16'd1;
    state   <= START_STATE;
  end
 else
   begin
     counter <= 0;
     state   <= SEND_BIT_STATE;
   end
end

// Esperar CLKS_PER_BIT-1 ciclos de reloj
SEND_BIT_STATE :
  begin
    o_tx <= data_byte[bit_index];
    if (counter < CLKS_PER_BIT-1)
      begin
        counter <= counter + 16'd1;
        state   <= SEND_BIT_STATE;
      end
     else
       begin
         counter <= 0;
         state   <= SEND_BIT_STATE;
       end
    end

// Esperar CLKS_PER_BIT-1 ciclos de reloj para finalizar cada bit de datos
SEND_BIT_STATE:
  begin
    o_tx <= data_byte[bit_index]; //sustituir el port o el pin o_tx por el puerto físico del xdc de kintex que te voy a pasar
    if (counter < CLKS_PER_BIT-1)
      begin
        counter <= counter + 16'd1;
        state   <= SEND_BIT_STATE;
      end
    else
      begin
        bit_index <= bit_index + 3'd1;
        state     <= SEND_BIT_STATE;
     end
   else
     begin
       state      <= STOP_STATE;
   end
 end
end

// Enviar bit de parada
STOP_STATE :
  begin
    o_tx <= 1; //sustituye el nombre del pin o_tx por el pin real del xdc file que te voy a pasar en el chat
  
// Esperar CLKS_PER_BIT-1 ciclos de reloj para finalizar el bit de parada
if (counter < CLKS_PER_BIT-1)
  begin
    counter <= counter + 16'd1;
    state   <= STOP_STATE;
  end
 else
   begin
     o_done <= 1; // levantar este pin para el ciclo de reloj final, sustituye por el pin físico del XDC del chat. UART, SPI etc por uno de los puertos idóneos
     o_active <= 0;
     state    <= IDLE_STATE;
   end
end

default :
  state <= IDLE_STATE;

endcase
end

endmodule