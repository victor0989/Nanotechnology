module uart_rx
  #(parameter CLKS_PER_BIT = 434)
  (
    input   clock,
    input        ,
    output reg   ,
    output reg [7:0] //
  );

localparam IDLE_STATE  = 2'b00;
localparam START_STATE = 2'b01;
localparam GET_BIT_STATE = 2'b10;
localparam STOP_STATE    = 2'b11;

reg        rx_buffer     = 1'b1;
reg        rx            = 1'b1;

reg [1:0]  state          = IDLE_STATE;
reg [15:0] counter        = 0;
reg [2:0]  bit_index      = 0;
reg [7:0]  data_byte      = 0;

// Double-buffer the incoming RX line. This allows it to be
  // used in the UART RX Clock Domain and removes problems caused
  // by metastability.
always @(posedge clock)
  begin
    rx_buffer <= i_rx;
    rx        <= rx_buffer;
  end

// The state machine
always @(posedge clock)
  begin

    case (state)

      IDLE_STATE :
        begin
          o_data_avail <= 0;
          counter   <= 0;
          bit_index <= 0;
          if (rx == 0)
            state <= START_STATE;
          else
            state <= IDLE_STATE;
         end

// Wait until the middle of the start bit
START_STATE :
  begin
    if (counter == (CLKS_PER_BIT-1)/2)
      begin
        if (rx == 0)
          begin
            counter <= 0;
            state   <= GET_BIT_STATE;
          end
         else
           state <= IDLE_STATE;
        end
      else
        begin
          counter <= counter + 16'd1;
          state   <= START__STATE;
        end
      end

// wait CLKS_PER_BIT-1 clock cycles to sample
RX for next bit
GET_BIT_STATE :
  begin
    if (counter < CLKS_PER_BIT-1)
      begin
        counter <= counter + 16'd1;
        state   <= GET_BIT_STATE;
      end
     else
       begin
         counter                 <= 0;
         data_byte[bit_index]    <= rx;

// Check if we have received all bits
                if (bit_index < 7)
                  begin
                    bit_index <= bit_index + 3'd1;
                    state     <= GET_BIT_STATE;
                  end
                else
                  begin
                    state     <= STOP_STATE;
                  end
              end
          end
